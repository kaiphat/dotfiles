# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled the all
# possible completions will be listed.
smart_completion = True

# Display the completions in several columns. (More completions will be
# visible.)
wider_completion_menu = False

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = True

# If multi_line_mode is set to "psql", in multi-line mode, [Enter] will execute
# the current input if the input ends in a semicolon.
# If multi_line_mode is set to "safe", in multi-line mode, [Enter] will always
# insert a newline, and [Esc] [Enter] or [Alt]-[Enter] must be used to execute
# a command.
multi_line_mode = safe

# Destructive warning mode will alert you before executing a sql statement
# that may cause harm to the database such as "drop table", "drop database"
# or "shutdown".
destructive_warning = True

# Enables expand mode, which is similar to `\x` in psql.
expand = False

# Enables auto expand mode, which is similar to `\x auto` in psql.
auto_expand = False

# If set to True, table suggestions will include a table alias
generate_aliases = True

# log_file location.
# In Unix/Linux: ~/.config/pgcli/log
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\log
# %USERPROFILE% is typically C:\Users\{username}
log_file = ~/.config/pgcli_log

# keyword casing preference. Possible values "lower", "upper", "auto"
keyword_casing = lower

# casing_file location.
# In Unix/Linux: ~/.config/pgcli/casing
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\casing
# %USERPROFILE% is typically C:\Users\{username}
casing_file = default

# If generate_casing_file is set to True and there is no file in the above
# location, one will be generated based on usage in SQL/PLPGSQL functions.
generate_casing_file = True

# Casing of column headers based on the casing_file described above
case_column_headers = True

# history_file location.
# In Unix/Linux: ~/.config/pgcli/history
# In Windows: %USERPROFILE%\AppData\Local\dbcli\pgcli\history
# %USERPROFILE% is typically C:\Users\{username}
history_file = ~/.config/pgcli_history

# Default log level. Possible values: "CRITICAL", "ERROR", "WARNING", "INFO"
# and "DEBUG". "NONE" disables logging.
log_level = NONE

# Order of columns when expanding * to column list
# Possible values: "table_order" and "alphabetic"
asterisk_column_order = table_order

# Whether to qualify with table alias/name when suggesting columns
# Possible values: "always", never" and "if_more_than_one_table"
qualify_columns = always

# When no schema is entered, only suggest objects in search_path
search_path_filter = False

# Default pager.
# pager = 'nvim +Man! -c "set nowrap modifiable noreadonly buftype=nofile"'
pager = /Users/ilyapu/dotfiles/scripts/nvim_pager

# Timing of sql statments and table rendering.
timing = True

# Table format. Possible values: psql, plain, simple, grid, fancy_grid, pipe,
# ascii, double, github, orgtbl, rst, mediawiki, html, latex, latex_booktabs,
# textile, moinmoin, jira, vertical, tsv, csv.
# Recommended: psql, fancy_grid and grid.
table_format = github

# Syntax Style. Possible values: manni, igor, xcode, vim, autumn, vs, rrt,
# native, perldoc, borland, tango, emacs, friendly, monokai, paraiso-dark,
# colorful, murphy, bw, pastie, paraiso-light, trac, default, fruity
# syntax_style = bw native
syntax_style = native

# Keybindings:
# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
# When Vi mode is disabled emacs keybindings such as Ctrl-A for home and Ctrl-E
# for end are available in the REPL.
vi = True

# Error handling
# When one of multiple SQL statements causes an error, choose to either
# continue executing the remaining statements, or stopping
# Possible values "STOP" or "RESUME"
on_error = STOP

# Set threshold for row limit. Use 0 to disable limiting.
row_limit = 20

# Skip intro on startup and goodbye on exit
less_chatty = True

# Postgres prompt
# \t - Current date and time
# \u - Username
# \h - Short hostname of the server (up to first '.')
# \H - Hostname of the server
# \d - Database name
# \p - Database port
# \i - Postgres PID
# \# - "@" sign if logged in as superuser, '>' in other case
# \n - Newline
# \dsn_alias - name of dsn alias if -D option is used (empty otherwise)
# multiline_continuation_char = " "
prompt = "❯ "
# prompt = "➜  "
multiline_continuation_char = " "

# Number of lines to reserve for the suggestion menu
min_num_menu_lines = 10

# The string used in place of a null value.
null_string = <null>

# manage pager on startup
enable_pager = True

# Use keyring to automatically save and load password in a secure manner
keyring = False
show_bottom_toolbar = False

# Custom colors for the completion menu, toolbar, etc.
[colors]
Token.Menu.Completions.Completion.Current = "bg:#5f5f87 #e4e4e4"
Token.Menu.Completions.Completion = "bg:#262626 #e4e4e4"
Token.Menu.Completions.Meta.Current = "bg:#5f5f87 #e4e4e4"
Token.Menu.Completions.Meta = "bg:#262626 #e4e4e4"
Token.Menu.Completions.MultiColumnMeta = "bg:#aaffff #000000"
Token.Menu.Completions.ProgressButton = "bg:#6666aa #6666aa"
Token.Menu.Completions.ProgressBar = "bg:#6666aa #6666aa"

Token.SelectedText = "bg:#6666aa #e4e4e4"
Token.SearchMatch = "bg:#4444aa #e4e4e4"
Token.SearchMatch.Current = "bg:#44aa44 #e4e4e4"

Token.Toolbar = "bg:#00005f #a8a8a8"
Token.Toolbar.Off = "bg:#00005f #aaaaaa"
Token.Toolbar.On = "bg:#00005f #888888"
Token.Toolbar.Search = noinherit bold
Token.Toolbar.Search.Text = nobold
Token.Toolbar.System = noinherit bold
Token.Toolbar.Arg = noinherit bold
Token.Toolbar.Arg.Text = nobold
Token.Toolbar.Transaction.Valid = "bg:#222222 #00ff5f bold"
Token.Toolbar.Transaction.Failed = "bg:#222222 #ff005f bold"

Token.Output.Header = "#6e88a6 bold"
Token.Output.OddRow = "#81A1C1"
Token.Output.EvenRow = "#81A1C1"

Token.Prompt = "#afafff"
Token.Literal.String = "#87d7af"
Token.Literal.Number = "#ffaf87"
Token.Keyword = "bold #afd7ff"
Token.Continuation = "#ffaf87"

# Named queries are queries you can execute by name.
[named queries]
get_stats = "select now() - query_start duration, pid, query from pg_stat_activity where pg_stat_activity.query_start is not null order by duration desc limit 100"
get_stat_for_period = '''SELECT
	ROUND(mean_exec_time::NUMERIC, 2) AS mean,
	ROUND(total_exec_time::NUMERIC, 2) AS total,
	calls,
	ROUND((100 * total_exec_time / SUM(total_exec_time::NUMERIC) OVER ())::NUMERIC, 2) AS percentage_cpu,
	query
FROM pg_stat_statements
ORDER BY mean DESC
LIMIT 20'''

# DSN to call by -D option
[alias_dsn]

# Format for number representation
# for decimal "d" - 12345678, ",d" - 12,345,678
# for float "g" - 123456.78, ",g" - 123,456.78
[data_formats]
decimal = ""
float = ""
